{
	"name": "df_transform_HospitalAdmission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_covidreportingdl",
						"type": "LinkedServiceReference"
					},
					"name": "HospitalAdmission"
				},
				{
					"dataset": {
						"referenceName": "ds_coutry_lookup",
						"type": "DatasetReference"
					},
					"name": "CountrySource"
				},
				{
					"linkedService": {
						"referenceName": "ls_adls_covidreportingdl",
						"type": "LinkedServiceReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_HospitalAdmission_Sink",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_Hospital_Admission_Daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "selectRequiredFields"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectRequiredFields2"
				},
				{
					"name": "splitWeeklyAndDaily"
				},
				{
					"name": "DeriveYearAndWeek"
				},
				{
					"name": "joinWithDimDate"
				},
				{
					"name": "AggWeekStartEndDate"
				},
				{
					"name": "pivotWeeklyCounts"
				},
				{
					"name": "pivotDailyCount"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as string,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'raw',",
				"     folderPath: 'ecdc/hospital_admissions',",
				"     fileName: 'hospital_admissions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> HospitalAdmission",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrySource",
				"source(output(",
				"          date_key as date,",
				"          date as date,",
				"          year as string,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'lookup',",
				"     folderPath: 'dim_date',",
				"     fileName: 'dim_date.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DimDateSource",
				"HospitalAdmission select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields",
				"selectRequiredFields, CountrySource lookup(selectRequiredFields@country == CountrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = selectRequiredFields@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields2",
				"selectRequiredFields2 split(startsWith(indicator, \"Weekly\"),",
				"     disjoint: false) ~> splitWeeklyAndDaily@(Weekly, Daily)",
				"DimDateSource derive(ecdc_Year_Week = year + \"-W\"+lpad(week_of_year, 2, '0')) ~> DeriveYearAndWeek",
				"splitWeeklyAndDaily@Weekly, AggWeekStartEndDate join(reported_year_week == ecdc_Year_Week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithDimDate",
				"DeriveYearAndWeek aggregate(groupBy(ecdc_Year_Week),",
				"     Week_Start_Date = min(date),",
				"          Week_End_Date = max(date)) ~> AggWeekStartEndDate",
				"joinWithDimDate pivot(groupBy(country,",
				"          reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Week_Start_Date,",
				"          Week_End_Date),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: 'new$V_$N',",
				"     lateral: true) ~> pivotWeeklyCounts",
				"splitWeeklyAndDaily@Daily pivot(groupBy(country,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: 'new$V_$N',",
				"     lateral: true) ~> pivotDailyCount",
				"pivotWeeklyCounts sort(desc(reported_year_week, false),",
				"     asc(country, false),",
				"     caseInsensitive: true) ~> sortWeekly",
				"pivotDailyCount sort(desc(reported_date, false),",
				"     asc(country, false),",
				"     caseInsensitive: true) ~> sortDaily",
				"sortWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_Week_Start_Date = Week_Start_Date,",
				"          reported_Week_End_Date = Week_End_Date,",
				"          new_hospital_occupanct_count = {newWeekly new hospital admissions per 100k_count},",
				"          new_icu_occupancy_count = {newWeekly new ICU admissions per 100k_count},",
				"          source",
				"     )) ~> sinkWeekly",
				"sortDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {newDaily hospital occupancy_count},",
				"          ICU_occupancy_count = {newDaily ICU occupancy_count},",
				"          source",
				"     )) ~> sinkDaily"
			]
		}
	}
}